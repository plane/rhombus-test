#lang rhombus

import:
  racket/base:
    rename:
      displayln ~to say
    expose:
      say
  rhombus/macro: no_prefix
  opengl: no_prefix

import:
  "private/threading.rhm": no_prefix
  "private/sdl2.rkt": no_prefix
  "private/ffi.rkt"
  "private/bitwise.rkt"


// -----------------------------------------------

operator (lhs ∨ rhs):
  bitwise.or(lhs, rhs)

expr.rule '(▷ $name):
  '(symbol($name))
  
expr.rule '($cond ◈ $name):
  '(if $cond
      | [symbol($name)]
      | [])

fun sdl_init_flags():
  val audio      : #true
  val controller : #true
  val events     : #true
  val timer      : #true
  val video      : #true

  base.append(
    audio      ◈ SDL_INIT_AUDIO,
    controller ◈ SDL_INIT_GAMECONTROLLER,
    events     ◈ SDL_INIT_EVENTS,
    timer      ◈ SDL_INIT_TIMER,
    video      ◈ SDL_INIT_VIDEO,
  )


fun sdl_window_flags():
  val borderless_fullscreen : #true
  val fullscreen            : #false
  val grab_input            : #true
  val no_window_decorations : #false
  val maximized             : #false
  val opengl                : #true

  base.append(
    borderless_fullscreen ◈ SDL_WINDOW_FULLSCREEN_DESKTOP,
    fullscreen            ◈ SDL_WINDOW_FULLSCREEN,
    grab_input            ◈ SDL_WINDOW_INPUT_GRABBED,
    maximized             ◈ SDL_WINDOW_MAXIMIZED,
    no_window_decorations ◈ SDL_WINDOW_BORDERLESS,
    opengl                ◈ SDL_WINDOW_OPENGL,
  )


// -----------------------------------------------


expr.rule '(sdl_check: $body ...):
  '(sdl_error_if($body ...))

fun | sdl_error_if(#false) : base.void()
    | sdl_error_if(_)      : base.error("SDL Error: " & SDL_GetError())

fun | sdl_bool(#false) : SDL_FALSE
    | sdl_bool(_)      : SDL_TRUE


// -----------------------------------------------


fun init_sdl():
  SDL_SetMainReady()
  sdl_check: SDL_Init(sdl_init_flags()) < 0
  sdl_check: SDL_GL_LoadLibrary(#false) < 0
  sdl_check: SDL_GL_SetAttribute(▷ SDL_GL_ACCELERATED_VISUAL, 1) < 0
  sdl_check: SDL_GL_SetAttribute(▷ SDL_GL_CONTEXT_MAJOR_VERSION, 4) < 0
  sdl_check: SDL_GL_SetAttribute(▷ SDL_GL_CONTEXT_MINOR_VERSION, 6) < 0
  sdl_check: SDL_GL_SetAttribute(▷ SDL_GL_DOUBLEBUFFER, 1) < 0
  sdl_check: SDL_GL_SetAttribute(▷ SDL_GL_DEPTH_SIZE, 24) < 0


fun new_ptr(type):
  ffi.cast(
    ffi.malloc(▷ atomic, ffi.ctype_sizeof(type)),
    ffi._pointer,
    type)


// If _int_star and _intptr ever differ, I'll be in big trouble
fun get_window_size(window):
  val width_ptr  : new_ptr(_int_star)
  val height_ptr : new_ptr(_int_star)
  SDL_GetWindowSize(window, width_ptr, height_ptr)

  val width  : ffi.ptr_ref(width_ptr,  ffi._intptr)
  val height : ffi.ptr_ref(height_ptr, ffi._intptr)
  [width, height]


fun init_opengl(window):
  val context: SDL_GL_CreateContext(window)
  sdl_check: !context
  val [width, height]: get_window_size(window)
  glViewport(0, 0, width, height)
  glClearColor(1.0, 0.5, 1.0, 1.0)
  glDisable(GL_DEPTH_TEST)
  glDisable(GL_CULL_FACE)


fun init_vsync():
  val vsync    : #true
  val adaptive : #true
  sdl_check: 
    SDL_GL_SetSwapInterval(cond | adaptive : -1
                                | vsync    :  0
                                | ~else    :  1) < 0


fun get_window():
  val window_title: "Hello, world!"
  val x_pos: SDL_WINDOWPOS_UNDEFINED
  val y_pos: SDL_WINDOWPOS_UNDEFINED
  val x_res: 640
  val y_res: 480

  val window:
    SDL_CreateWindow(
      window_title, x_pos, y_pos, x_res, y_res, sdl_window_flags())
  sdl_check: !window
  init_opengl(window)
  init_vsync()
  window


fun sysinfo():
  fun | fmt_bool(1): "Yes"
      | fmt_bool(_): "No"
  say("Platform:         " & SDL_GetPlatform())
  say("CPU count:        " & SDL_GetCPUCount())
  say("System RAM:       " & SDL_GetSystemRAM() & " MiB")
  say("Has SSE:          " & SDL_HasSSE()   |> fmt_bool)
  say("Has SSE2:         " & SDL_HasSSE2()  |> fmt_bool)
  say("Has SSE3:         " & SDL_HasSSE3()  |> fmt_bool)
  say("Has SSE4.1:       " & SDL_HasSSE41() |> fmt_bool)
  say("Has SSE4.2:       " & SDL_HasSSE42() |> fmt_bool)
  say("OpenGL vendor:    " & glGetString(GL_VENDOR))
  say("OpenGL renderer:  " & glGetString(GL_RENDERER))
  say("OpenGL version:   " & glGetString(GL_VERSION))
  say("OpenGLSL version: " & glGetString(GL_SHADING_LANGUAGE_VERSION))


fun update(window):
  val surface: SDL_GetWindowSurface(window)
  sdl_check: !surface
  sdl_check: SDL_UpdateWindowSurface(window) < 0
  glClear(GL_COLOR_BUFFER_BIT ∨ GL_DEPTH_BUFFER_BIT)
  SDL_GL_SwapWindow(window)
  base.sleep(1)


fun bye():
  SDL_Quit()
  say("Bye, bye!")


// -----------------------------------------------


fun main():
  val window: get_window()
  sysinfo()
  update(window)
  bye()

main()
