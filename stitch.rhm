#lang rhombus

/**
 **  stitch.rhm
 **
 **    Stitches together an image atlas from individual images.
 **    Will attempt to find the smallest power-of-two texture
 **    size that fits all of the source images.
 **
 **    Bin packing is NP hard and the algorithm here is very
 **    simple, so it won't be perfect, but it seems to work
 **    fairly well anyway.
 **
 **  Input:
 **
 **    One or more images in the `in/` directory:
 **      - Must be PNG, any format libpng can read.  You can
 **        add additional formats below.
 **
 **  Output:
 **
 **    `atlas.png` in the current directory:
 **       - 32-bit RGBA POT texture.
 **
 **    `atlas.txt` in the current directory:
 **       - Keeps track of where each source image ended up
 **         in the texture atlas.
 **       - Each entry has the following format:
 **            filename
 **            x
 **            y
 **            width
 **            height
 **       - filename is an arbitrary string.
 **       - x, y, width, and height are numeric values.
 **       - There is a blank line between entries.
 **       - Entries are sorted alphanumerically by filename.
 **
 **  Notes:
 **
 **    - This program is written using the experimental Rhombus
 **      language prototype!  See:
 **
 **          https://github.com/racket/rhombus-brainstorming
 **
 **      Building this program requires samth's fancy-app prototype:
 **
 **          https://github.com/mflatt/shrubbery-rhombus-0/pull/4
 **
 **      These things are in-progress and this program may break!
 **
 **    - Stitch places images on a 16x16 grid.  This works fairly 
 **      well and takes about one second to run with the Snailiad
 **      art set.  You can save a tiny bit of space by reducing
 **      it to 8, 4, 2, or 1, but it doesn't save much space and
 **      it takes considerably longer.
 **
 **  -Plane
 **
 **/

import:
  racket/base:
    rename:
      #{bytes->string/utf-8} ~to bytes_to_string
      #{for-each}            ~to for_each
      #{inexact->exact}      ~to inexact_to_exact
      #{make-vector}         ~to make_vector
      #{path->string}        ~to path_to_string
      #{string-downcase}     ~to string_downcase
      #{string<?}            ~to string_less_than
      #{with-output-to-file} ~to with_output_to_file
  racket/control
  racket/file:
    rename:
      #{find-files}          ~to find_files
  racket/list
  racket/path:
    rename:
      #{file-name-from-path} ~to to_filename
      #{path-get-extension}  ~to get_extension


import:
  rhombus/macro: no_prefix


import:
  "private/sdl/sdl.rkt"
  "private/sdl/img.rkt"
  "private/threading.rhm": no_prefix


// -----------------------------------------------


operator (lhs ≠ rhs):
  ! (lhs === rhs)


expr.rule '(▷ $name):
  '(symbol($name))


expr.rule '($cond ◈ $name):
  '(if $cond | [symbol($name)]
             | [])


// -----------------------------------------------


fun img_init_flags():
  val jpg        : #false
  val png        : #true    // only support PNG for now
  val tif        : #false
  val webp       : #false

  base.append(
    jpg  ◈ IMG_INIT_JPG,
    png  ◈ IMG_INIT_PNG,
    tif  ◈ IMG_INIT_TIF,
    webp ◈ IMG_INIT_WEBP,
  )


// -----------------------------------------------


expr.rule '(when $cond ... : $then ...; ...):
  '(if $cond ... | $then ...; ...
                 | base.void())


fun sdl_error_if(cond):
  when cond:
    base.error("SDL2 error: " & sdl.GetError())
fun img_error_if(cond):
  when cond:
    base.error("SDL2_image error: " & img.GetError())


expr.rule '(sdl_check: $body ...):
  '(sdl_error_if($body ...))
expr.rule '(img_check: $body ...):
  '(img_error_if($body ...))


// -----------------------------------------------


fun init_sdl():
  val img_flags: img_init_flags()

  sdl.SetMainReady()
  sdl_check: sdl.Init([]) < 0
  img_check: img.Init(img_flags) ≠ img_flags


fun get_surface_size(surface):
  values(sdl.Surface_w(surface),
         sdl.Surface_h(surface))


fun make_surface(width, height):
  val surface:
    sdl.CreateRGBSurfaceWithFormat(0, width, height, 32, sdl.PIXELFORMAT_RGBA32)
  sdl_check: !surface
  surface


fun copy_surface(src, dest, x, y):
  val (width, height):
    get_surface_size(src)

  val dest_rect:
    sdl.make_SDL_Rect(x, y, width, height)

  sdl_check:
    sdl.BlitSurface(src, #false, dest, dest_rect) < 0


// -----------------------------------------------


fun sum(xs):
  fun add(lhs, rhs):
    lhs + rhs
  base.foldl(add, 0, xs)


fun log2(x):
  base.log(x) / base.log(2)


fun round_up_to_nearest_pow2(x):
  log2(x)
    |> base.ceiling
    |> base.expt(2, _)


fun pixel_size_to_grid_size(x, granularity):
  base.ceiling(x / granularity)
    |> base.inexact_to_exact


// -----------------------------------------------


class Image(surface,
            full_path,
            filename,
            w,          // pixel width, height
            h,
            gridw,      // grid width, height
            gridh)


fun make_Image(filepath, granularity):
  val src: img.Load(filepath)
  img_check: !src

  val pixels: sdl.Surface_pixels(src)
  sdl_check: !pixels

  val (width, height): get_surface_size(src)
  val gridw: pixel_size_to_grid_size(width, granularity)
  val gridh: pixel_size_to_grid_size(height, granularity)

  val filename:
    path.to_filename(filepath)
      |> base.path_to_string

  Image(src, filepath, filename, width, height, gridw, gridh)


fun find_image_files(pathname):
  fun is_image_file(filename):
    val bytes_ext:
      path.get_extension(filename)

    if bytes_ext
      | val ext_lowercase: bytes_ext
                             |> base.bytes_to_string
                             |> base.string_downcase
        match ext_lowercase
          | ".png" : #true       // add other filetypes here
          | _      : #false
      | #false

  file.find_files(is_image_file, pathname)


fun max_side(img):
  base.max(img.w, img.h)


fun load_sorted_imgs(pathname, granularity):
  fun compare_size(lhs, rhs):
    max_side(lhs) > max_side(rhs)

  fun load(path):
    make_Image(path, granularity)

  find_image_files(pathname)
    |> base.map(load, _)
    |> base.sort(_, compare_size)  // Sort from big to small


fun get_atlas_size(imgs):
  fun size(img):
    img.w * img.h

  val img_maxdim:
    base.apply(
      base.max,
      base.map(max_side, imgs))

  val average_size:
    base.map(size, imgs)
      |> sum
      |> base.sqrt

  base.max(average_size, img_maxdim)
    |> round_up_to_nearest_pow2
    |> base.inexact_to_exact


fun make_grid(width  -: Integer,
              height -: Integer):
  val max_index : width * height
  val data      : base.make_vector(max_index, #false)

  fun check_range(x, y):
    when base.or(x < 0,
                 x >= width,
                 y < 0,
                 y >= height):
      base.error("index out of range: x=" & x & ", y=" & y)

  fun _get(x -: Integer,
           y -: Integer):
    check_range(x, y)
    data[y * width + x]

  fun _set(x -: Integer,
           y -: Integer):
    check_range(x, y)
    data[y * width + x] = #true

  class Grid(get, set, width, height)
  Grid(_get, _set, width, height)


fun make_atlas_grid(atlas_width -: Integer,
                    granularity -: Integer):
  val row_squares : atlas_width / granularity
  val col_squares : row_squares

  make_grid(row_squares, col_squares)


fun check_filled(grid, x0, y0, x1, y1):
  fun check_row(y):
    fun check(x):
      grid.get(x, y)
    base.ormap(check, list.range(x0, x1))
  base.ormap(check_row, list.range(y0, y1))


fun check_empty(grid, x0, y0, x1, y1):
  !check_filled(grid, x0, y0, x1, y1)


fun set_filled(grid, x0, y0, x1, y1):
  fun set_row(y):
    fun set(x):
      grid.set(x, y)
    base.for_each(set, list.range(x0, x1))
  base.for_each(set_row, list.range(y0, y1))


// -----------------------------------------------


class ImageInfo(filename, x, y, w, h)


fun make_atlas(imgs, granularity, size_mult = 1):
  val atlas_size   : get_atlas_size(imgs) * size_mult
  val grid         : make_atlas_grid(atlas_size, granularity)
  val atlas_image  : make_surface(atlas_size, atlas_size)

  fun insert_img(img):
    val max_gridx : grid.width  - img.gridw + 1
    val max_gridy : grid.height - img.gridh + 1
    fun loop(x = 0, y = 0):
      cond
        | y == max_gridy:
            control.abort(                                      // we ran out of space, so let's try
              make_atlas(imgs, granularity, size_mult * 2))     // again with twice as much space
        | x == max_gridx:
            loop(0, y + 1)
        | ~else:
            val x1: x + img.gridw                               // grid coordinates
            val y1: y + img.gridh
            val px: x * granularity                             // pixel coordinates
            val py: y * granularity
            if check_empty(grid, x, y, x1, y1)
              | copy_surface(img.surface, atlas_image, px, py)  // copy the image to our atlas
                set_filled(grid, x, y, x1, y1)                  // keep track of it in our grid
                ImageInfo(img.filename, px, py, img.w, img.h)   // and return its pixel location
              | loop(x + 1, y)
    loop()

  val atlas_index:
    base.map(insert_img, imgs)
      |> base.sort(_, fun(lhs, rhs):
                        base.string_less_than(lhs.filename, 
                                              rhs.filename))

  values(atlas_index,
         atlas_image)


fun write_atlas_index(atlas_index -: Array,
                      filename -: String):
  fun fmt_entry(entry):
    base.for_each(
      base.displayln, [entry.filename,
                       entry.x,
                       entry.y,
                       entry.w,
                       entry.h,
                       ""])

  base.with_output_to_file(
    filename,
    fun():
      base.for_each(fmt_entry, atlas_index),
    ~exists: ▷ replace)


fun stitch_images(src_image_folder      = "in",
                  output_image_filename = "atlas.png",
                  output_index_filename = "atlas.txt",
                  granularity           = 16):
  val imgs:
    load_sorted_imgs(src_image_folder, granularity)

  val (atlas_index,
       atlas_image):
    control.prompt(
      make_atlas(imgs, granularity))

  write_atlas_index(atlas_index,
                    output_index_filename)

  img_check:
    img.SavePNG(atlas_image,
                output_image_filename) < 0


fun main():
  init_sdl()
  stitch_images()
  sdl.Quit()


main()
